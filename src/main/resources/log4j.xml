<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders : 전달된 로그를 어디에 출력할지 결정(콘솔출력, 파일기록, db저장) -->
	<!-- 
		ConsoleAppender : 로그를 콘솔에 출력하기 위한 Appender
		JDBCAppender : 로그를 DB에 출력하기 위한 Appender
		FileAppender : 로그를 파일에 출력하기 위한 Appender
					   (단점 : 파일에 계속 기록이 남기 때문에 크기가 지나치게 커질수 있고 지속적인 로그 관리 불가능)
		RollingAppender : FileAppender를 보완한 개념
					   (보완 : 일정 조건 후에 기존 파일을 백업 파일로 바꾸고 다시 처음부터 시작)
	-->
	<!-- 
		Layout : 로그를 어떤 형식으로 출력할 지 결정
					DataLayout, HTMLLayout, PatternLayout, SimpleLayout, XMLLayout
											(디버깅에 가장 적합)
		%p : debug, info, warn, error, fatal등의 priority 출력
		%m : 로그 내용 출력
		%d : 로깅 이벤트가 방생한 시간 출력( 프로그램 실행 속도를 느리게 함)
			포맷을 %d{HH:mm:ss, SSS} 등과 같은 형태로 사용
		%t : 로그 이벤트가 발생된 스레드 이름 출력
		%% : %표시 출력
		%n : 플랫폼 종속적인 개행문자 출력
		%c : package(카테고리)출력
		%c{n} : n(숫자)만큼의 package를 가장 하단부터 역으로 출력
				카테고리가 a.b.c처럼 되어 있을 때 %c{2}는 b.c 출력
		%C : 호출자의 클래스 명 출력
		%F : 로깅이 발생한 프로그램 파일 명 출력
		%l : 로깅이 발생한 caller의 정보 출력 
		%L : 로깅이 발생한 caller의 라인 수 출력
		%M : 로깅이 발생한 method 이름 출력
		%r : 애플리케이션 시작 이후 부터 로깅이 발생이 시점의 시간(milliseconds) 출력
		%x : 로깅이 발생한 스레드와 관련된 NDC(nested diagnostic context) 출력
		%X : 로깅이 발생한 스레드와 관련된 MDC(mapped diagnostic context) 출력
	-->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
			<param name="ConversionPattern" value="%-5p: %p - %m%n" />
		</layout>
	</appender>
	
	<!-- DEBUG : MemberController.enrollView{300} - 회원등록 페이지 -->
	<appender name="myConsole" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c{1}.%M{%L} - %m%n" />
		</layout>
	</appender>
	
	<appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %m%n"/>
		</layout>
	</appender>
	
	
	<!-- Application Loggers -->
	<!--
		level : 로그 레벨 파라미터 
			debug < info < warn < error < fatal
			
			FATAL : 아주 심각한 에러 발생
			ERROR : 요청 처리중 문제 발생
			WARN : 프로그램 실행에는 문제 없지만 향수 시스템 에러의 워인이 될수 있는 경고성 메시지
 			INFO : 상태 변경과 같은 정보성 메세지
			DEBUG : 개발 시 디버스 용도로 사용하는 메시지
			TRACE : 디버그 레벨이 너무 광범위한 것을 해결하기 위해 조금 더 상세한 이벤트를 나타냄(경로 추적)
			
		appender-ref : 지정하게 되면 name에 지정한 패키지에 속한 클래스에서 먼저 발생하고, 기본적으로 rootLogger에 전달되어다시 출력
						appender-ref 지정이 없는 경우 root로 바로 보내서 실행
		additivity : false로 지정된 경우 rootLogger(부모)로 전달하지 않음(기본 값 true)
					  단, additivity가 false인 경우 appender-ref를 꼭 지정해야 함
	-->
	<logger name="com.kh.spring">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	<logger name="com.kh.spring.log.Log4jTest">
		<level value="debug"/>
		<appender-ref ref = "console"/>
	</logger>
	
	<logger name="com.kh.spring.member.controller.MemberController" additivity="false">
		<level value="debug"/>
		<appender-ref ref = "myConsole"/>
	</logger>
	
	<logger name="com.kh.spring.common.interceptor.LoggerInterceptor" additivity="false">
		<level value="debug"/>
		<appender-ref ref = "myConsole"/>
	</logger>
	
	<logger name="com.kh.spring.common.interceptor.LoginInterceptor" additivity="false">
		<level value="info"/>
		<appender-ref ref = "myConsole"/>
	</logger>
	
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="info"/>
		<appender-ref ref = "sqlLogger"/>
	</logger>
	
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info"/>
		<appender-ref ref = "sqlLogger"/>
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
